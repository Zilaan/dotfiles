
# Load dependencies.
pmodload 'helper'

CURRENT_BG='NONE'
SEGMENT_SEPARATOR='⮀'


# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -Pn $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

function build_prompt {
prompt_segment red black '%(1?;%{%F{red}%}✘ ;)%(!;%{%F{yellow}%}⚡ ;)%(1j;%{%F{cyan}%}%j⚙ ;)%{%F{black}%}%n'
  prompt_segment green black '%{%F{black}%}%D{%d/%m-%Y}'
#prompt_segment black default '%(1?;%{%F{red}%}✘ ;)%(!;%{%F{yellow}%}⚡ ;)%(1j;%{%F{cyan}%}%j⚙ ;)[%D{%K:%M:%S}]'
  prompt_segment blue black '%2~'
#if $git_status; then
#prompt_segment green black '${(e)git_info[prompt]}${git_info[status]}'
#fi
  prompt_end
}

#start_time=$SECONDS
#function prompt_raman_preexec {
#start_time=$SECONDS
#}

#function calc_elapsed_time {
#  if [[ $timer_result -ge 3600 ]]; then
#    let "timer_hours = $timer_result / 3600"
#    let "remainder = $timer_result % 3600"
#    let "timer_minutes = $remainder / 60"
#    let "timer_seconds = $remainder % 60"
#    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
#  elif [[ $timer_result -ge 60 ]]; then
#    let "timer_minutes = $timer_result / 60"
#    let "timer_seconds = $timer_result % 60"
#    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
#  elif [[ $timer_result -gt 10 ]]; then
#    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
#  fi
#}

function prompt_raman_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi
}


function prompt_raman_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_raman_precmd
SEP='❯'
#SEP='█'›ç∂éƒ¸˛ı√ªﬁ’‘œπ•®ß†ü‹Ω≈µ÷˙æø©@¥$∞§|[]≈±´°˝É√‡˜ÜˆŒ∏˚^’◊∑∆∫¯˘¬ºﬂØÆ≥⁄ˇÇÇ«»“”„·—¡”¥¢‰¶\{}≠¿
  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{red}❯%F{yellow}❯%F{green}❯%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{green}❮%F{yellow}❮%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ':%%B%F{yellow}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{green}✚%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{yellow}⬆%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{yellow}⬇%f%%b'
  zstyle ':prezto:module:git:info:branch' format ':%F{green}⭠%b%f'
  zstyle ':prezto:module:git:info:commit' format ':%F{green}➦%.7c%f'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{red}✖%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{yellow}✱%f%%b'
  zstyle ':prezto:module:git:info:position' format ':%F{red}%p%f'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{magenta}➙%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{cyan}✭%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{yellow}═%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{red}?%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'prompt' ' %F{blue}git%f$(coalesce "%b" "%p" "%c")%s' \
    'rprompt' '%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='
%{%f%b%k%}$(build_prompt)
  ${editor_info[keymap]} '
# RPROMPT='[%D{%K:%M:%S %p}]'
  RPROMPT='${editor_info[overwrite]}%(?:: %F{red}⏎%f)${VIM:+" %B%F{green}V%f%b"}${git_info[rprompt]} ${git_info:+${(e)git_info[prompt]}}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_raman_setup "$@"
