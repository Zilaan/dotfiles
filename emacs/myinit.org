* General stuff
  #+BEGIN_SRC emacs-lisp
    ;; Disable some GUI stuff
    (scroll-bar-mode -1)              ;; Disable the scroll bar
    (tool-bar-mode -1)                ;; Disable GUI icons
    (menu-bar-mode -1)                ;; Disable menu bar, i.e. |File|Edit| etc
    (show-paren-mode t)               ;; Show matching parenthesis
    (setq make-backup-files nil)      ;; Don't backup files
    (defalias 'yes-or-no-p 'y-or-n-p) ;; Simpler yes/no
    (delete-selection-mode t)         ;; Replace region by writing
    (electric-pair-mode t)            ;; Auto insert matching brackets etc
    (setq inhibit-splash-screen t)    ;; No init screen
    (setq inhibit-startup-message t)  ;; No startup message
    (setq-default c-basic-offset 4)   ;; User 4 spaces for indent?
    (setq visible-bell t)             ;; Use visual bell

    ;; Make the modeline flash for visual bell
    (setq ring-bell-function
          (lambda ()
            (let ((orig-fg (face-foreground 'mode-line)))
              (set-face-foreground 'mode-line "#F2804F")
              (run-with-idle-timer 0.1 nil
                                   (lambda (fg) (set-face-foreground 'mode-line fg))
                                   orig-fg))))

    ;; Set font settings
    (set-face-attribute 'default nil
                        :font "Monaco"
                        :height 135
                        :weight 'normal
                        :width 'normal)
  #+END_SRC

* Packages
** org-bullets
   To get nice bullets in org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** wgrep
   Allows editing of grep buffers to do search and replaces a cross multiple files
   #+BEGIN_SRC emacs-lisp
     (use-package wgrep
       :ensure t
       :config
       (setq wgrep-auto-save-buffer t)
       (setq wgrep-enable-key "e"))
   #+END_SRC
** origami
   Origami - Does code folding, ie hide the body of an
   if/else/for/function so that you can fit more code on your screen
   #+BEGIN_SRC emacs-lisp
     (use-package origami
       :ensure t
       :commands (origami-mode)
       :bind (:map origami-mode-map
                   ("C-c o :" . origami-recursively-toggle-node)
                   ("C-c o a" . origami-toggle-all-nodes)
                   ("C-c o t" . origami-toggle-node)
                   ("C-c o o" . origami-show-only-node)
                   ("C-c o u" . origami-undo)
                   ("C-c o U" . origami-redo)
                   ("C-c o C-r" . origami-reset)
                   )
       :config
       (setq origami-show-fold-header t)
       ;; The python parser currently doesn't fold if/for/etc. blocks, which is
       ;; something we want. However, the basic indentation parser does support
       ;; this with one caveat: you must toggle the node when your cursor is on
       ;; the line of the if/for/etc. statement you want to collapse. You cannot
       ;; fold the statement by toggling in the body of the if/for/etc.
       (add-to-list 'origami-parser-alist '(python-mode . origami-indent-parser))
       :init
       (add-hook 'prog-mode-hook 'origami-mode))
   #+END_SRC
** window-numbering
   Use meta with number e.g. M-1, M-2 etc to move to another window
   #+BEGIN_SRC emacs-lisp
     (use-package window-numbering
       :ensure t
       :config
       (eval-when-compile
         ;; Silence missing function warnings
         (declare-function window-numbering-mode "window-numbering.el"))
       (window-numbering-mode t))
   #+END_SRC
** string-inflection
   used for switching between different cases, eg CamelCase,
   lowerCamelCase, snake_case, and SCREAMING_SNAKE_CASE
   #+BEGIN_SRC emacs-lisp
     (use-package string-inflection
       :ensure t
       :defer t
       :bind (("C-c c i" . string-inflection-cycle)
              ("C-c c l" . string-inflection-lower-camelcase)
              ("C-c c c" . string-inflection-camelcase)
              ("C-c c s" . string-inflection-underscore)
              ("C-c c u" . string-inflection-upcase)))
   #+END_SRC
** beacon
   Higlights the cursor line when switching windows
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (eval-when-compile
         ;; Silence missing function warnings
         (declare-function beacon-mode "beacon.el"))
       :config
       (beacon-mode t))
   #+END_SRC
** better-defaults
   I'm not sure exactly what this is doing but it's suppose to set some better default settings.
   I should really investigate if this is needed.
   #+BEGIN_SRC emacs-lisp
     (use-package better-defaults
       :ensure t)
   #+END_SRC
** company
   Auto complete
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 3))
     (global-company-mode t)
   #+END_SRC
** flycheck
   Syntax checking for various languages
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+END_SRC
** which-key
   Gives suggestions for keys after a pause
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC
** doom-themes
   Different themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (load-theme 'doom-nord t))
   #+END_SRC
** doom-modeline
   A simple but nice modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init
       (doom-modeline-mode t)
       (setq doom-modeline-icon nil)
       (setq doom-modeline-major-mode-icon nil)
       (setq doom-modeline-major-mode-color-icon nil)
       (setq doom-modeline-buffer-state-icon nil)
       (setq doom-modeline-buffer-modification-icon nil)
       (setq doom-modeline-bar-width 3)
       (setq doom-modeline-minor-modes t))
   #+END_SRC
** all-the-icons
   Various icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC
** multiple-cursors
   Use multiple cursors when editing
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind (("C-<" . mc/mark-previous-like-this)
              ("C-M-<" . mc/unmark-previous-like-this)
              ("C->" . mc/mark-next-like-this)
              ("C-M->" . mc/unmark-next-like-this)
              ("<ESC> <ESC>" . mc/keyboard-quit))
       :ensure t)
   #+END_SRC
** avy
   Like easymotion in Vim
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :bind (("C-:" . avy-goto-char)
              ("M-g w" . avy-goto-word-1))
       :ensure t)
   #+END_SRC
** magit
   Needed for better git workflow
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-x g" . magit-status))
       :ensure t)
   #+END_SRC
** expand-region
   Expands a marked regions in a smart way
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :bind ("C-c e" . er/expand-region)
       :ensure t)
   #+END_SRC
** rainbow-mode
   Highlight hex values with their respective colors
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :config (rainbow-mode t))
   #+END_SRC
** rainbow-delimiters
   Higlights nested parenthesis with different colors
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (eval-when-compile
         ;; Silence missing function warnings
         (declare-function rainbow-delimiters-mode "rainbow-delimiters.el"))
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** csv-mode
   Mode for editing csv files
   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :mode ("\\.csv\\'"))
   #+END_SRC
** json-mode
   Mode for editing json files
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :mode ("\\.json\\'"))
   #+END_SRC
* Keybindings
** Highlight whitespace
   Shortcut to toggle whitespace-mode
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c w") 'whitespace-mode)
   #+END_SRC
** Show line number
   Shortcut to toggle line numbers
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l") 'display-line-numbers-mode)
   #+END_SRC

